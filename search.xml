<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>7月第4周周报</title>
      <link href="/2024/07/28/7%E6%9C%88%E7%AC%AC4%E5%91%A8%E5%91%A8%E6%8A%A5/"/>
      <url>/2024/07/28/7%E6%9C%88%E7%AC%AC4%E5%91%A8%E5%91%A8%E6%8A%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="7月第4周周报"><a href="#7月第4周周报" class="headerlink" title="7月第4周周报"></a>7月第4周周报</h2><p>今天开始写日报周报，第一次写周报，不是很熟练，走一步看一步吧</p><h3 id="本周完成情况"><a href="#本周完成情况" class="headerlink" title="本周完成情况"></a>本周完成情况</h3><p>JAVA计划140P，实际完成70P，写代码的时间比想的时间长啊，得减慢一点计划多写点代码了</p><p>GO &#x2F; MySQL 计划学习80，暂未开始</p><h3 id="下周计划"><a href="#下周计划" class="headerlink" title="下周计划"></a>下周计划</h3><p>个人博客优化</p><p>用户中心</p><p>力扣刷题</p><p>面试鸭背题</p><p>JAVA 计划 学完坦克大战</p><p>MySQL 计划学完80P顺带完成这个星期没完成的</p><p>争取开始锻炼身体吧</p><p>顺便可以练练打字，现在打字还是有不少问题</p>]]></content>
      
      
      
        <tags>
            
            <tag> 周报 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.28总结</title>
      <link href="/2024/07/28/7-28%E6%80%BB%E7%BB%93/"/>
      <url>/2024/07/28/7-28%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="今日情况"><a href="#今日情况" class="headerlink" title="今日情况"></a>今日情况</h2><p>今天整体学习了线程的基础部分</p><p>线程是指程序创建的，一个进程的实体</p><p>一个程序可以拥有多个线程</p><p>这就引出来了并发和并行：</p><ol><li>并发：指的是在同一时刻，多个任务交替进行</li><li>并行：指的是在同一时刻，多个任务同事进行，多核CPU可以实现并行</li><li>其中，大多数时候是并发并行都在进行中</li></ol><h3 id="多线程基础"><a href="#多线程基础" class="headerlink" title="多线程基础"></a>多线程基础</h3><p>线程的基本使用：分别是 继承Thread类和实现Runnable接口</p><p>继承Thread类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> extend Thread&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这就是继承Thread类的方式,重写run方法进行线程的进行</span></span><br><span class="line"><span class="comment">//调用的时候，是T.start()调用该线程的使用，底层是start0()方法</span></span><br><span class="line"><span class="comment">//直接调用run方法是不会产生新进程的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    T.start();</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>实现Runnable接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这是实现Runnable接口的方式，实现Runnable接口中run方法</span></span><br><span class="line"><span class="comment">//本质还是调用Thread的方法，底层使用了设计模式[代理模式]</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>();</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(t);</span><br><span class="line">    <span class="comment">// 也可以 new Thread(t).start</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>实现Runnable接口是因为JAVA是单继承机制，所以在继承了其他类的时候，我们采用实现Runnable接口来进行多线程的开发</p><h3 id="线程终止"><a href="#线程终止" class="headerlink" title="线程终止"></a>线程终止</h3><p>线程在结束之后会自己退出</p><p>同时，我们也会设计一些变量来控制线程的终止，这叫做通知方式</p><h3 id="线程常用方法"><a href="#线程常用方法" class="headerlink" title="线程常用方法"></a>线程常用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gatName<span class="comment">//获取线程名字</span></span><br><span class="line">setName<span class="comment">//设置线程名字</span></span><br><span class="line">start<span class="comment">//启动线程</span></span><br><span class="line">run<span class="comment">//调用线程的run方法</span></span><br><span class="line">sleep<span class="comment">//线程休眠 单位ms</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">yield</span><span class="comment">//线程的礼让，不一定成功</span></span><br><span class="line">join<span class="comment">//线程的插队，插队成功，则先执行插队的线程</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>用户线程：也叫工作线程，当线程的任务执行完或通知方式结束</em><br><em>守护线程：一般是为工作线程服务的，当所有的用户线程结束，守护线程自动结束</em><br><em>常见的守护线程：垃圾回收机制</em></p><h3 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h3><p>有6个</p><p>new</p><p>尚未启动的线程</p><p>runnable</p><p>在java虚拟机中执行的线程</p><p>blocked</p><p>被阻塞等待监视器锁定的线程</p><p>waiting</p><p>正在等待另一个线程执行特定动作的线程</p><p>timed_waiting</p><p>正在等待另一个线程执行动作达到指定等待时间的的线程</p><p>terminated</p><p>已退出的线程</p><h3 id="线程同步问题"><a href="#线程同步问题" class="headerlink" title="线程同步问题"></a>线程同步问题</h3><p><em>在多线程编程，一些敏感数据不允许被多个线程同时访问，此时就使用同步访问技术，保证数据在任何同一时刻，最多有一个线程访问，以保证数据的完整性。</em></p><p>synchronized</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同步代码块</span></span><br><span class="line"><span class="keyword">synchronized</span>(Object)&#123; <span class="comment">// 得到对象的锁，才能操作同步代码</span></span><br><span class="line">    <span class="comment">//需要同步的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同步方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">(String s)</span>&#123;</span><br><span class="line">    <span class="comment">//需要同步的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>死锁：多个线程相互占用彼此的锁资源，都不肯想让，导致线程死锁，在编程中一定要避免死锁的发生</p><h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a><em>互斥锁</em></h3><ol><li><em>Java语言中，引入了对象互斥锁的概念，来保证共享数据操作的完整性。</em></li><li><em>每个对象都对应于一一个可称为“互斥锁”的标记，这个标记用来保证在任一-时刻， 只能有一个线程访问该对象。</em></li><li><em>关键字synchronized来与对象的互斥锁联系。当某个对象用synchronized修饰时，表明该对象在任一时刻只能由一个线程访问</em></li><li><em>同步的局限性:导致程序的执行效率要降低</em></li><li><em>同步方法(非静态的)的锁可以是this,也可以是其他对象(要求是同一个对象)</em></li><li><em>同步方法(静态的)的锁为当前类本身。</em></li></ol><p><em>注意事项：</em></p><ol><li><p><em>同步方法如果没有使用static修饰：默认锁对象为this</em></p></li><li><p><em>如果方法使用static修饰，默认锁对象：当前类.class</em></p></li><li><p><em>实现的落地步骤:</em></p><ul><li><p><em>需要先分析上锁的代码</em></p></li><li><p><em>选择同步代码块或同步方法</em></p></li><li><p><em>要求多个线程的锁对象为同一个即可</em></p></li></ul></li></ol><h3 id="释放锁"><a href="#释放锁" class="headerlink" title="释放锁"></a><em>释放锁</em></h3><p><em>下面操作会释放锁：</em></p><ol><li><em>当前线程的同步方法、同步代码块执行结束</em></li><li><em>当前线程在同步代码块、同步方法中遇到break、return</em></li><li><em>当前线程在同步代码块、同步方法中出现了未处理的Error或Exception，导致异常结束</em></li><li><em>当前线程在同步代码块、同步方法中执行了线程对象的wait()方法，当前线程暂停，并释放锁</em></li></ol><p><em>下面操作不会释放锁：</em></p><ol><li><em>线程执行同步代码块、同步方法时，程序调用了Thread.sleep()、Thread.yield()方法暂停当前线程的执行，不会释放锁</em></li><li><em>现成执行同步代码块时，其他线程调用了该线程的suspend()方法将线程挂起。该线程不会释放锁</em><ul><li><em>应尽量避免使用suspend()和resume()来控制线程，这两个已经不在推荐使用了</em></li></ul></li></ol><h3 id="坦克大战"><a href="#坦克大战" class="headerlink" title="坦克大战"></a>坦克大战</h3><p>今天写完了坦克大战的绝大部分，还有一些可以修改的地方，这几天学完剩下的之后进行修改</p><p>目前看下来：</p><ol><li>我方坦克死亡后仍旧可以发射子弹以及移动</li><li>坦克的重叠问题</li><li>建筑物的设置（不同关卡设置不同的建筑物布局）</li><li>比分的计算</li><li>我方坦克增加2P</li></ol><h2 id="今日所学知识的面试题"><a href="#今日所学知识的面试题" class="headerlink" title="今日所学知识的面试题"></a>今日所学知识的面试题</h2><h3 id="JAVA-中线程安全是什么意思"><a href="#JAVA-中线程安全是什么意思" class="headerlink" title="JAVA 中线程安全是什么意思"></a>JAVA 中线程安全是什么意思</h3><p>线程安全一般指的是在多线程情况下，一段代码或者某个对象可以正确地应对多线程访问，不会导致数据丢失、错乱等不一致问题。</p><p>并发场景下最常见的例子是 i++， i的初始值是0，如果在多线程场景下来执行 i++这段逻辑，并发执行1000次累加，每次执行的结果并不一定等于1000，这个场景就是线程不安全</p><p>但如果我们把 i++ 这个操作加上一把锁，这时候在并发执行1000次累加，每次的执行结果就都是1000了，这个场景就是线程安全的</p><h4 id="扩展：线程安全的实现方式"><a href="#扩展：线程安全的实现方式" class="headerlink" title="扩展：线程安全的实现方式"></a>扩展：线程安全的实现方式</h4><ol><li>原子操作:不可分割的操作，避免了多线程同时修改数据的问题，例如CAS就是一个原子操作。</li><li>锁机制:如互斥锁、读写锁等，保证同时只有一个线程能够访问共享资源。例如synchronized或者ReentrantLock。</li><li>并发控制:如信号量、条件变量等，控制线程的执行顺序和时机。例如Semaphore、CountDownLatch。</li></ol><h3 id="java-中-synchronized-是怎么实现的"><a href="#java-中-synchronized-是怎么实现的" class="headerlink" title="java 中 synchronized 是怎么实现的"></a>java 中 synchronized 是怎么实现的</h3><p>synchronized 的原理其实就是基于一个锁对象和锁对象相关联的一个 monitor 对象</p><p>在偏向锁和轻量级锁的时候只需要利用 CAS 来操控锁对象头即可完成加解锁动作</p><p>ps：</p><ol><li>偏向锁（Biased Locking）：偏向锁是一种针对单线程访问同步块的优化技术。一个线程获取了偏向锁后，再次进入同步块时，无需进行加锁操作，只需检查对象头中的标志位即可。如果有其他线程尝试竞争该锁，则会撤销偏向锁，并升级为轻量级锁或重量级锁。偏向锁的目的是提高单线程场景下的性能。</li><li>轻量级锁（Lightweight Lock）：轻量级锁是一种低级别的锁机制，用于在多个线程竞争同步块时减少锁的开销。当一个线程尝试获取轻量级锁时，会使用CAS（Compare and Swap）操作尝试修改对象头中的标志位，如果成功则获取锁，否则表示有其他线程竞争锁，会升级为重量级锁。轻量级锁的目的是在多线程竞争条件下减少锁的开销，以提高性能。</li><li>CAS（Compare and Swap）：CAS是一种无锁算法，用于实现多线程环境下的同步和数据一致性。CAS操作通过对比内存中的某个值与期望值是否相等，如果相等则进行更新操作，否则不进行任何操作。Java中的CAS操作是通过类的compareAndSwapXXX方法来实现，XXX表示数据类型（如int、long等）。CAS操作是原子性的，不需要加锁，因此性能较高，常用于实现乐观锁和无锁数据结构</li></ol><h3 id="什么是-Java-的-CAS（Compare-and-Swap）操作"><a href="#什么是-Java-的-CAS（Compare-and-Swap）操作" class="headerlink" title="什么是 Java 的 CAS（Compare and Swap）操作"></a>什么是 Java 的 CAS（Compare and Swap）操作</h3><p>Compare and Swap 即比较并交换</p><p>举个例子，我们经常有累加需求，比较一个值是否等于 1 ，如果等于 1 我们将他替换成 2，等于 2 我们将他替换成 3 </p><p>这种比较在多线程的情况下就不安全，比如此刻同时有两个线程执行到比较值是否等于 1 ，然后两个线程发现都等于 1 。然后两个线程都将他变成了2，这样明明加了两次，值却等于 2</p><p><img src="https://yuzhoucaitong-1258648662.cos.ap-beijing.myqcloud.com/test/image-20240728205108543.png" alt="image-20240728205108543"></p><p>这种情况其实加锁就可以解决，但是加锁是比较消耗资源的</p><p>CAS操作可以理解为“如果A的值等于B，则将A的值修改为C”。这种操作是原子性的，即在多线程环境下，CAS操作保证只有一个线程能成功执行，其他线程需要重新尝试。</p><p>CAS操作的原理是，先比较内存地址中的值与期望值是否相等，如果相等，则将内存地址的值更新为新值；如果不相等，则不做任何操作。</p><p>CAS操作主要包含三个操作数：内存地址（或对象的引用）（图中a的内存地址）、旧的期望值（图中的1）和新值（图中的2）</p><h3 id="Java-中什么情况会导致死锁？如何避免？"><a href="#Java-中什么情况会导致死锁？如何避免？" class="headerlink" title="Java 中什么情况会导致死锁？如何避免？"></a>Java 中什么情况会导致死锁？如何避免？</h3><ol><li>互斥条件：每个资源只能被一个线程占用</li><li>占有和等待：线程在持有至少一个资源的同时，等待获取其他资源</li><li>不可抢占：线程所获得的资源在未使用完毕之前不能被其他线程抢占</li><li>循环等待：多个线程形成一种头尾相接的循环等待资源关系</li></ol><p>只要打破上述的一个条件，就能避免死锁的发生</p><p>比如按序申请资源，这样就能破坏循环等待,比如有A、B两个资源,抢占的逻辑都是先抢A，抢到A之后才能抢B。</p><p>设置超时等待时间，避免一直占有资源等等。</p><h2 id="明日计划"><a href="#明日计划" class="headerlink" title="明日计划"></a>明日计划</h2><p>JAVA至少学到623，争取学到644</p><p>个人博客优化</p><p>用户中心的书写</p><p>go／MySQL继续学习</p><p>力扣刷题</p><p>面试鸭背题</p>]]></content>
      
      
      
        <tags>
            
            <tag> 打卡2.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打卡2.0day02</title>
      <link href="/2023/04/08/%E6%89%93%E5%8D%A12-0day02/"/>
      <url>/2023/04/08/%E6%89%93%E5%8D%A12-0day02/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="今天结束到四级还剩60天"><a href="#今天结束到四级还剩60天" class="headerlink" title="今天结束到四级还剩60天"></a>今天结束到四级还剩60天</h4><h4 id="日程完成情况"><a href="#日程完成情况" class="headerlink" title="日程完成情况"></a>日程完成情况</h4><p>‌h5作业做完√<br>‌教资上课√<br>‌词汇课3-3×<br>‌语法课1节×<br>‌半张试卷×</p><h4 id="今天未安排在日程表的完成情况"><a href="#今天未安排在日程表的完成情况" class="headerlink" title="今天未安排在日程表的完成情况"></a>今天未安排在日程表的完成情况</h4><p>个人博客主题完善了部分，这个h5作业真能写啊</p><p>我花了3个小时才写完，是最近英语学的问题，疏忽了练习代码，明天代码+英语都学学，确保代码忘得不是太多</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>上午教资4节课</p><p>看了2小时漫画，明天好好学习</p><p>24.20睡觉</p>]]></content>
      
      
      
        <tags>
            
            <tag> 打卡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写计算器时的一些问题</title>
      <link href="/2023/04/08/%E5%86%99%E8%AE%A1%E7%AE%97%E5%99%A8%E6%97%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
      <url>/2023/04/08/%E5%86%99%E8%AE%A1%E7%AE%97%E5%99%A8%E6%97%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1.没有判断除数不能为0</p><p>给除法加一个if判断，当除数为0的时候弹出提示框</p><p>2.做了一次运算后，新输入的值不能作为操作数1被判断，必须按一次清空重置键才可以</p><p>在每次运算之后添加<br>this.result &#x3D; null;<br>this.isClear &#x3D; true;<br>使得再次进行运算的时候已经进行了重置，新输入的值就可以作为操作数1来判断</p><p>3.小数点运算会出问题</p><p>在计算结果的时候，先把结果乘100，然后用Math.round()方法取到最接近的整数，<br>再除以100，最后再用toFixed(this.num.length - 1)方法将结果转换为一个字符串并且保留比输入的数字差不多多位数的一个小数，<br>这样就可以得到一个较为准确的值</p><p>4.显示运算过程</p><p>添加一个数组processList，用于存储运算过程。<br>然后在numBtn和operatorBtn方法中，每次惦记，当前的数字和运算符都会添加到这个数组中<br>最后在h5页面添加一个view标签用来显示processList存储的运算过程</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打卡2.0day01</title>
      <link href="/2023/04/07/%E6%89%93%E5%8D%A12-0day01/"/>
      <url>/2023/04/07/%E6%89%93%E5%8D%A12-0day01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="日程完成情况"><a href="#日程完成情况" class="headerlink" title="日程完成情况"></a>日程完成情况</h4><p>‌腾讯云存储新手入门看完     √<br>‌知识星球收藏的个人博客搭建教程    √<br>‌词汇课看到3-2看到3-1<br>‌语法课看一节课×<br>‌试卷重新打印然后做半张<br>‌控制花费，制定一个表格    √<br>‌回顾下画画，别不会了，大概用半小时√<br>‌看高效人士七个习惯的第二个习惯×<br>‌写桌面上的记录√</p><h4 id="今天未安排在日程表的完成情况"><a href="#今天未安排在日程表的完成情况" class="headerlink" title="今天未安排在日程表的完成情况"></a>今天未安排在日程表的完成情况</h4><p>h5作业完成静态以及部分js代码</p><p>个人博客主题修改完成，还需完善</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>今天莫名很困</p><p>上午4节课</p><p>晚上休息打了局游戏被折磨了</p><p>24.20睡觉</p>]]></content>
      
      
      
        <tags>
            
            <tag> 打卡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打卡day03</title>
      <link href="/2023/02/28/%E6%89%93%E5%8D%A1day03/"/>
      <url>/2023/02/28/%E6%89%93%E5%8D%A1day03/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      
        <tags>
            
            <tag> 打卡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打卡day02</title>
      <link href="/2023/02/25/%E6%89%93%E5%8D%A1day02/"/>
      <url>/2023/02/25/%E6%89%93%E5%8D%A1day02/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天上午10点左右通关原子之心，下午想去优化一下博客的整体界面，结果优化完一堆报错，又给调回原样了，先学学再调吧。</p><p>明天看下高数一还有计算机二级的题</p><p>游戏变了，我也跟着变了，变得没有娱乐了</p>]]></content>
      
      
      
        <tags>
            
            <tag> 打卡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打卡day01</title>
      <link href="/2023/02/24/%E6%89%93%E5%8D%A1day01/"/>
      <url>/2023/02/24/%E6%89%93%E5%8D%A1day01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>昨天购买了原子之心，今天和舍友一起打了一天，真的是个很好玩的游戏，明天再来一个小时差不多就可以通关了。</p><p>做了一张漫画的图，顺带测试一下</p><p><img src="https://yuzhoucaitong-1258648662.cos.ap-beijing.myqcloud.com/test/image-20230307090411988.png" alt="image-20230307090411988"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 打卡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2023/02/22/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/02/22/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>2023年2月23日</p><p>虽说是2.22创建的，但那天创建好已经晚上了，所以决定今天写下第一篇博客，用来记载一些个人介绍以及目前的目标</p><h2 id="个人介绍"><a href="#个人介绍" class="headerlink" title="个人介绍"></a>个人介绍</h2><p>cn：宇宙菜桐</p><p>专业：移动互联网应用技术</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><h3 id="学业"><a href="#学业" class="headerlink" title="学业"></a>学业</h3><p>计算机二级报名完成，3.25-27考试</p><p>专升本考试的准备</p><h3 id="经济"><a href="#经济" class="headerlink" title="经济"></a>经济</h3><p>需要2.3w，有0.7w</p><p>故需要精进h5以及微信小程序的学习，进行外包作业的制作，进行一部分的资金来源</p><p>没什么可写的，心血来潮跟着视频制作了一下个人博客，后续会进行页面的美观</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/02/22/hello-world/"/>
      <url>/2023/02/22/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
